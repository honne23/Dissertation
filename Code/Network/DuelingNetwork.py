import torch.nn as nnclass DuelingNetwork(nn.Module):    def __init__(self, in_size,hidden_size, out_size):        super(DuelingNetwork, self).__init__()                self.feature_layer = nn.Sequential(            nn.Linear(in_size, hidden_size),            nn.ReLU(),        )                self.advantage_layer = nn.Sequential(            nn.Linear(hidden_size, hidden_size),            nn.ReLU(),            nn.Linear(hidden_size, out_size)        )        self.value_layer = nn.Sequential(            nn.Linear(hidden_size, hidden_size),            nn.ReLU(),            nn.Linear(hidden_size, 1)        )    def forward(self, x):        out = self.feature_layer(x)        adv = self.advantage_layer(out)        val = self.value_layer(out)        return val + (adv - adv.mean(dim=-1, keepdim=True))